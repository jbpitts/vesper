{"version":3,"sources":["../../src/ActionExecutor.ts"],"names":[],"mappings":"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","file":"ActionExecutor.js","sourcesContent":["import \"reflect-metadata\";\nimport {EntityManager, getMetadataArgsStorage as getTypeormMetadataArgsStorage, QueryRunner} from \"typeorm\";\nimport {Action} from \"./interface/Action\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\nimport {Container} from \"typedi\";\n\n/**\n * Executes action in multiple steps.\n * While we could do it in a single step using async/await syntax we decided to\n * make core complex code in favour of less ticks to improve performance.\n */\nexport class ActionExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected builder: SchemaBuilder) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes controller action.\n     */\n    executeControllerAction(action: Action): any {\n        return this.step1(action);\n    }\n\n    /**\n     * Executes resolver action.\n     */\n    executeResolver(action: Action): any {\n        return this.step3(action);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * First step - check if action must run in a transaction.\n     */\n    protected step1(action: Action): any {\n\n        // create a new scoped container for this request\n        if (this.builder.connection) {\n\n            if ((action.metadata as ActionMetadata).transaction &&\n                this.builder.connection.options.type !== \"mongodb\") {\n\n                const containerEntityManager = action.context.container.get(EntityManager);\n                let queryRunner: QueryRunner;\n                if (containerEntityManager &&\n                    containerEntityManager.queryRunner &&\n                    containerEntityManager.queryRunner.isReleased === false) {\n                    queryRunner = containerEntityManager.queryRunner;\n                } else {\n                    queryRunner = this.builder.connection.createQueryRunner();\n                }\n\n                if (queryRunner.isTransactionActive === false) {\n                    return queryRunner.startTransaction().then(() => {\n                        return this.step2(action, queryRunner.manager);\n                    });\n                }\n\n            } else {\n                return this.step2(action, this.builder.connection.manager);\n            }\n        }\n\n        return this.step2(action);\n    }\n\n    /**\n     * Second step - setup container.\n     */\n    protected step2(action: Action, entityManager?: EntityManager): any {\n\n        // in the case if someone inject container itself\n        action.context.container.set(Container, action.context.container);\n\n        // if entity manager was given the register it in the container\n        if (entityManager) {\n            action.context.container.set(EntityManager, entityManager);\n            getTypeormMetadataArgsStorage().entityRepositories.forEach(repository => {\n                action.context.container.set(repository.target, entityManager.getCustomRepository(repository.target));\n            });\n        }\n\n        // if setup-container callback was set then execute it before controller method execution\n        if (this.builder.options.setupContainer) {\n            const setupContainerResult = this.builder.options.setupContainer(action.container, action);\n            if (setupContainerResult instanceof Promise)\n                return setupContainerResult.then(() => this.step3(action));\n        }\n\n        return this.step3(action);\n    }\n\n    /**\n     * Third step - check authorization.\n     */\n    protected step3(action: Action): any {\n\n        let promiseResults: Promise<any>[] = [];\n        action.metadata.authorizes.forEach(authorize => {\n\n            let authorizationCheckResult: any;\n            if (authorize instanceof Array) {\n                authorizationCheckResult = this.builder.options.authorizationChecker(authorize, action);\n            } else {\n                authorizationCheckResult = action.container.get(authorize).check(action);\n            }\n            if (authorizationCheckResult instanceof Promise)\n                promiseResults.push(authorizationCheckResult);\n        });\n        if (promiseResults.length > 0)\n            return Promise.all(promiseResults).then(result => this.step4(action));\n\n        return this.step4(action);\n    }\n\n    /**\n     * Forth step - validate action args.\n     */\n    protected step4(action: Action): any {\n\n        let promiseResults: Promise<any>[] = [];\n        action.metadata.validators.forEach(validator => {\n            const validationResult = action.container.get(validator).validate(action.args);\n            if (validationResult instanceof Promise)\n                promiseResults.push(validationResult);\n        });\n        if (promiseResults.length > 0)\n            return Promise.all(promiseResults).then(result => this.step5(action));\n\n        return this.step5(action);\n    }\n\n    /**\n     * Fifth step - execute controller / resolver method.\n     */\n    protected step5(action: Action): any {\n        if ((action.metadata as ActionMetadata).type === \"query\" || (action.metadata as ActionMetadata).type === \"mutation\") {\n            return action.container.get<any>(action.metadata.target)[action.metadata.methodName](action.args, action.context, action.info);\n        } else {\n            // for subscriptions and resolver methods we send obj\n            return action.container.get<any>(action.metadata.target)[action.metadata.methodName](action.obj, action.args, action.context, action.info);\n        }\n    }\n\n}\n"],"sourceRoot":"."}