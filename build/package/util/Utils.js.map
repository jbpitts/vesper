{"version":3,"sources":["../../src/util/Utils.ts"],"names":[],"mappings":";;AAAA,2BAA6B;AAE7B;;;;GAIG;AACH;IAAA;IAmCA,CAAC;IAjCG;;OAEG;IACI,kCAA4B,GAAnC,UAAoC,WAAqB,EAAE,OAAwB;QAAxB,wBAAA,EAAA,WAAW,KAAK,EAAE,KAAK,CAAC;QAE/E,IAAM,eAAe,GAAG,UAAU,QAAa,EAAE,SAAqB;YAClE,IAAI,QAAQ,YAAY,QAAQ,EAAE;gBAC9B,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC5B;iBAAM,IAAI,QAAQ,YAAY,KAAK,EAAE;gBAClC,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAM,IAAK,OAAA,eAAe,CAAC,CAAC,EAAE,SAAS,CAAC,EAA7B,CAA6B,CAAC,CAAC;aAC/D;iBAAM,IAAI,QAAQ,YAAY,MAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBACnE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,EAAzC,CAAyC,CAAC,CAAC;aACnF;YAED,OAAO,SAAS,CAAC;QACrB,CAAC,CAAC;QAEF,IAAM,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,UAAC,OAAO,EAAE,GAAG;YAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACrE,CAAC,EAAE,EAAc,CAAC,CAAC;QAEnB,IAAM,IAAI,GAAG,QAAQ;aAChB,MAAM,CAAC,UAAA,IAAI;YACR,IAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YAClE,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,YAAY,KAAK,OAAO,CAAC;QAClF,CAAC,CAAC;aACD,GAAG,CAAC,UAAA,IAAI;YACL,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;QAEP,OAAO,eAAe,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrC,CAAC;IAEL,YAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,sBAAK","file":"Utils.js","sourcesContent":["import * as path from \"path\";\n\n/**\n * Utility functions used in the codebase.\n *\n * @internal\n */\nexport class Utils {\n\n    /**\n     * Loads all exported classes from the given directory.\n     */\n    static importClassesFromDirectories(directories: string[], formats = [\".js\", \".ts\"]): Function[] {\n\n        const loadFileClasses = function (exported: any, allLoaded: Function[]) {\n            if (exported instanceof Function) {\n                allLoaded.push(exported);\n            } else if (exported instanceof Array) {\n                exported.forEach((i: any) => loadFileClasses(i, allLoaded));\n            } else if (exported instanceof Object || typeof exported === \"object\") {\n                Object.keys(exported).forEach(key => loadFileClasses(exported[key], allLoaded));\n            }\n\n            return allLoaded;\n        };\n\n        const allFiles = directories.reduce((allDirs, dir) => {\n            return allDirs.concat(require(\"glob\").sync(path.normalize(dir)));\n        }, [] as string[]);\n\n        const dirs = allFiles\n            .filter(file => {\n                const dtsExtension = file.substring(file.length - 5, file.length);\n                return formats.indexOf(path.extname(file)) !== -1 && dtsExtension !== \".d.ts\";\n            })\n            .map(file => {\n                return require(file);\n            });\n\n        return loadFileClasses(dirs, []);\n    }\n\n}"],"sourceRoot":".."}