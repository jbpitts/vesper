{"version":3,"sources":["../../src/metadata/ActionMetadataBuilder.ts"],"names":[],"mappings":"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","file":"ActionMetadataBuilder.js","sourcesContent":["import {GraphModule} from \"../options/GraphModule\";\nimport {ActionMetadata} from \"./ActionMetadata\";\nimport {Utils} from \"../util/Utils\";\nimport {MetadataArgsStorage} from \"../metadata-args/MetadataArgsStorage\";\nimport {AuthorizedMetadataArgs} from \"../metadata-args/AuthorizedMetadataArgs\";\nimport {GraphModuleControllerAction} from \"../options/GraphModuleControllerAction\";\nimport {ArgsValidatorMetadataArgs} from \"../metadata-args/ArgsValidatorMetadataArgs\";\nimport {SchemaBuilderOptions} from \"../options/SchemaBuilderOptions\";\nimport {ActionMetadataArgs} from \"../metadata-args/ActionMetadataArgs\";\n\n/**\n * Builds action metadatas.\n */\nexport class ActionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected options: SchemaBuilderOptions,\n                protected metadataArgsStorage: MetadataArgsStorage) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds action metadatas based on the given stack options and metadata args storage.\n     */\n    build(modules: GraphModule[]): ActionMetadata[] {\n        const actions: ActionMetadata[] = [];\n\n        // first load controllers\n        // thus we are filling metadata args storage\n        modules.forEach(module => {\n            if (!module.controllers)\n                return;\n\n            const controllerDirs = module.controllers.filter(controller => typeof controller === \"string\") as string[];\n            Utils.importClassesFromDirectories(controllerDirs);\n        });\n\n        // now we have all metadata args registered in the storage, first read all controllers from the storage\n        this.metadataArgsStorage.controllers.forEach(controller => {\n            this.metadataArgsStorage.actions.forEach(action => {\n                if (action.target !== controller.target)\n                    return;\n\n                const validators = this.metadataArgsStorage.validators.filter(validator => validator.target === action.target && validator.methodName === action.methodName);\n                const authorizes = this.metadataArgsStorage.authorizes.filter(authorize => authorize.target === action.target && authorize.methodName === action.methodName);\n                actions.push(this.createFromMetadataArgs(action, validators, authorizes));\n            });\n        });\n\n        // now register all actions passed in the array of modules\n        modules.forEach(module => {\n            if (module.controllers) {\n                module.controllers.forEach(controller => {\n                    if (typeof controller === \"object\") {\n                        actions.push(this.createFromModuleDefinition(controller.type, controller));\n                    }\n                });\n            }\n        });\n\n        return actions;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates ActionMetadata from the given ActionMetadataArgs object.\n     */\n    protected createFromMetadataArgs(action: ActionMetadataArgs, validators: ArgsValidatorMetadataArgs[], authorizes: AuthorizedMetadataArgs[]): ActionMetadata {\n        const metadata = new ActionMetadata();\n        metadata.type = action.type;\n        metadata.target = action.target;\n        metadata.methodName = action.methodName;\n        metadata.name = action.name || action.methodName;\n        metadata.transaction = action.transaction === true ? true : false;\n        metadata.validators = validators.map(validator => validator.validator);\n        metadata.authorizes = authorizes.map(authorize => authorize.roles);\n        return metadata;\n    }\n\n    /**\n     * Creates ActionMetadata from the given GraphModuleControllerAction object.\n     */\n    protected createFromModuleDefinition(type: \"query\"|\"mutation\"|\"subscription\", action: GraphModuleControllerAction<any>): ActionMetadata {\n        const metadata = new ActionMetadata();\n        metadata.type = type;\n        metadata.target = action.controller;\n        metadata.methodName = action.action;\n        metadata.name = action.name || action.action;\n        metadata.transaction = action.transaction === true ? true : false;\n        metadata.validators = action.validators || [];\n        metadata.authorizes = action.authorizes || [];\n        return metadata;\n    }\n\n}"],"sourceRoot":".."}