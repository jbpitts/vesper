{"version":3,"sources":["../../src/metadata/ResolveMetadata.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH;IAAA;QA4BI;;;WAGG;QACH,eAAU,GAAY,KAAK,CAAC;IAYhC,CAAC;IAAD,sBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,0CAAe","file":"ResolveMetadata.js","sourcesContent":["import {ArgsValidatorInterface} from \"../interface/ArgsValidatorInterface\";\nimport {RoleCheckerInterface} from \"../index\";\nimport {EntitySchema} from \"typeorm\";\n\n/**\n * Metadata for a single resolver action.\n */\nexport class ResolveMetadata {\n\n    /**\n     * Class on which resolver is applied.\n     */\n    target: Function;\n\n    /**\n     * Resolver name.\n     */\n    name: string;\n\n    /**\n     * Resolver entity class.\n     */\n    entity?: Function|EntitySchema<any>;\n\n    /**\n     * Method name.\n     */\n    methodName: string;\n\n    /**\n     * Resolving property name.\n     * If not set then its equal to method name.\n     */\n    resolvingPropertyName: string;\n\n    /**\n     * Indicates if data loader is enabled for this resolver method.\n     * By default data loader is disabled.\n     */\n    dataLoader: boolean = false;\n\n    /**\n     * Args validator used to validate resolve arguments.\n     */\n    validators: { new (): ArgsValidatorInterface<any> }[];\n\n    /**\n     * Special roles used to check user authorization status to access resolve.\n     */\n    authorizes: (any[]|{ new (): RoleCheckerInterface })[];\n\n}"],"sourceRoot":".."}