{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,mCAAsC;AACtC,4BAA0B;AAC1B,2EAAwE;AACxE,qDAAkD;AAGlD,iDAA8C;AAE9C,iCAAiC;AACjC,yDAAgE;AAEhE,yDAAsD;AACtD,2DAAwD;AAOxD,4EAA4E;AAC5E,eAAe;AACf,4EAA4E;AAE5E,4EAA4E;AAC5E,eAAe;AACf,4EAA4E;AAE5E,+CAA0C;AAC1C,4CAAuC;AACvC,4CAAuC;AACvC,0CAAqC;AACrC,uCAAkC;AAClC,yCAAoC;AACpC,0CAAqC;AACrC,8CAAyC;AAczC,6CAAwC;AACxC,4CAAuC;AAEvC,0CAAqC;AAErC,uCAAkC;AAClC,qCAAqC;AAErC,4EAA4E;AAC5E,iBAAiB;AACjB,4EAA4E;AAE5E;;;GAGG;AACH;IACI,IAAI,CAAE,MAAc,CAAC,yBAAyB;QACzC,MAAc,CAAC,yBAAyB,GAAG,IAAI,yCAAmB,EAAE,CAAC;IAE1E,OAAQ,MAAc,CAAC,yBAAyB,CAAC;AACrD,CAAC;AALD,wDAKC;AAED;;GAEG;AACH,mBAA0B,OAAgC;IACtD,IAAM,SAAS,GAAG,IAAI,iCAAe,CAAC,OAAO,CAAC,CAAC;IAC/C,OAAO,SAAS,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,SAAS,EAAT,CAAS,CAAC,CAAC;AACnD,CAAC;AAHD,8BAGC;AAED;;GAEG;AACH,2BAAkC,OAA8B;IAC5D,IAAM,UAAU,GAAG,IAAI,6BAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,OAAO,UAAU,CAAC,KAAK,EAAE,CAAC;AAC9B,CAAC;AAHD,8CAGC;AAED;;;GAGG;AACH,gBAAuB,MAAW,EAAE,OAAgB;IAChD,IAAM,UAAU,cACZ,OAAO,EAAE,EAAE,EACX,MAAM,EAAE,MAAM,IACX,CAAC,OAAO,IAAI,EAAE,CAAC,CACrB,CAAC;IAEF,OAAO,UAAC,GAAY,EAAE,GAAa,EAAE,IAAkB;QACnD,IAAM,SAAS,GAAG,kBAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;QACpC,SAAS,CAAC,GAAG,CAAC,+BAAc,EAAE,GAAG,CAAC,CAAC;QACnC,SAAS,CAAC,GAAG,CAAC,iCAAe,EAAE,GAAG,CAAC,CAAC;QACpC,UAAU,CAAC,OAAO,CAAC,SAAS,GAAG,SAAS,CAAC;QACzC,UAAU,CAAC,OAAO,CAAC,WAAW,GAAG,EAAE,CAAC;QAEpC,OAAO,iCAAY,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;YAC5B,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,UAAU;YACnB,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK;SACtD,CAAC,CAAC,IAAI,CAAC,UAAC,WAAW;YAEhB,qBAAqB;YACrB,IAAM,wBAAwB,GAAG,SAAS,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACzG,IAAI,wBAAwB;gBACxB,wBAAwB,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS;gBAC9D,wBAAwB,CAAC,WAAW;gBACpC,wBAAwB,CAAC,WAAW,CAAC,mBAAmB;gBACxD,wBAAwB,CAAC,WAAW,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC3D,OAAO,wBAAwB,CAAC,WAAW;qBACtC,iBAAiB,EAAE;qBACnB,IAAI,CAAC,cAAM,OAAA,wBAAwB,CAAC,WAAW,CAAC,OAAO,EAAE,EAA9C,CAA8C,CAAC;qBAC1D,IAAI,CAAC,cAAM,OAAA,WAAW,EAAX,CAAW,CAAC,CAAC;aAChC;YACD,OAAO,WAAW,CAAC;QAEvB,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,WAAW;YAEhB,GAAG,CAAC,SAAS,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;YACjE,GAAG,CAAC,SAAS,CAAC,gBAAgB,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YAChF,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YACvB,GAAG,CAAC,GAAG,EAAE,CAAC;YAEV,yCAAyC;YACzC,kBAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAEzB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAqB;YAE3B,uBAAuB;YACvB,IAAM,wBAAwB,GAAG,SAAS,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,uBAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACzG,IAAI,wBAAwB;gBACxB,wBAAwB,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS;gBAC9D,wBAAwB,CAAC,WAAW;gBACpC,wBAAwB,CAAC,WAAW,CAAC,mBAAmB;gBACxD,wBAAwB,CAAC,WAAW,CAAC,UAAU,KAAK,KAAK,EAAE;gBAC3D,OAAO,wBAAwB,CAAC,WAAW;qBACtC,mBAAmB,EAAE;qBACrB,IAAI,CAAC,cAAM,OAAA,wBAAwB,CAAC,WAAW,CAAC,OAAO,EAAE,EAA9C,CAA8C,CAAC;qBAC1D,IAAI,CAAC,cAAQ,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;aACrC;YACD,MAAM,KAAK,CAAC;QAEhB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,KAAqB;YAE3B,IAAI,gBAAgB,KAAK,KAAK,CAAC,IAAI;gBAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;YAEvB,IAAI,KAAK,CAAC,OAAO,EAAE;gBACf,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,UAAA,MAAM;oBACrC,GAAG,CAAC,SAAS,CAAC,MAAM,EAAE,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACN;YAED,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;YAClC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACzB,GAAG,CAAC,GAAG,EAAE,CAAC;YAEV,yCAAyC;YACzC,kBAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AA/ED,wBA+EC","file":"index.js","sourcesContent":["import {EntityManager} from \"typeorm\";\nimport \"reflect-metadata\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {VesperFramework} from \"./VesperFramework\";\nimport {VesperFrameworkOptions} from \"./options/VesperFrameworkOptions\";\nimport {NextFunction, Request, Response} from \"express\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SchemaBuilderOptions} from \"./options/SchemaBuilderOptions\";\nimport {Container} from \"typedi\";\nimport {HttpQueryError, runHttpQuery} from \"apollo-server-core\";\nimport {GraphQLSchema} from \"graphql\";\nimport {CurrentRequest} from \"./token/CurrentRequest\";\nimport {CurrentResponse} from \"./token/CurrentResponse\";\n\ndeclare global {\n  interface RequestInit {\n  }\n}\n\n// -------------------------------------------------------------------------\n// Main exports\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Main exports\n// -------------------------------------------------------------------------\n\nexport * from \"./decorator/ArgsValidator\";\nexport * from \"./decorator/Authorized\";\nexport * from \"./decorator/Controller\";\nexport * from \"./decorator/Mutation\";\nexport * from \"./decorator/Query\";\nexport * from \"./decorator/Resolve\";\nexport * from \"./decorator/Resolver\";\nexport * from \"./decorator/Subscription\";\n\nexport * from \"./interface/Action\";\nexport * from \"./interface/ArgsValidatorInterface\";\nexport * from \"./interface/ResolverInterface\";\nexport * from \"./interface/RoleCheckerInterface\";\n\nexport * from \"./options/GraphModule\";\nexport * from \"./options/GraphModuleControllerAction\";\nexport * from \"./options/GraphModuleResolver\";\nexport * from \"./options/GraphModuleResolverMethod\";\nexport * from \"./options/VesperFrameworkOptions\";\nexport * from \"./options/SchemaBuilderOptions\";\n\nexport * from \"./token/CurrentResponse\";\nexport * from \"./token/CurrentRequest\";\n\nexport * from \"./util/ResolverUtils\";\n\nexport * from \"./VesperFramework\";\n// export * from \"./ValidationError\";\n\n// -------------------------------------------------------------------------\n// Main Functions\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n * Metadata args storage follows the best practices and stores metadata in a global variable.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    if (!(global as any).vesperMetadataArgsStorage)\n        (global as any).vesperMetadataArgsStorage = new MetadataArgsStorage();\n\n    return (global as any).vesperMetadataArgsStorage;\n}\n\n/**\n * Bootstraps framework the easiest way.\n */\nexport function bootstrap(options?: VesperFrameworkOptions): Promise<VesperFramework> {\n    const framework = new VesperFramework(options);\n    return framework.start().then(() => framework);\n}\n\n/**\n * Builds GraphQLSchema based on provided options.\n */\nexport function buildVesperSchema(options?: SchemaBuilderOptions): Promise<GraphQLSchema> {\n    const middleware = new SchemaBuilder(options);\n    return middleware.build();\n}\n\n/**\n * Vesper Express middleware.\n * You can use it in your own express setup.\n */\nexport function vesper(schema: any, options?: object) {\n    const allOptions: any = {\n        context: {},\n        schema: schema,\n        ...(options || {})\n    };\n\n    return (req: Request, res: Response, next: NextFunction) => {\n        const container = Container.of(req);\n        container.set(CurrentRequest, req);\n        container.set(CurrentResponse, res);\n        allOptions.context.container = container;\n        allOptions.context.dataLoaders = {};\n\n        return runHttpQuery([req, res], {\n            method: req.method,\n            options: allOptions,\n            query: req.method === \"POST\" ? req.body : req.query,\n        }).then((gqlResponse) => {\n\n            // commit transaction\n            const transactionEntityManager = container.has(EntityManager) ? container.get(EntityManager) : undefined;\n            if (transactionEntityManager &&\n                transactionEntityManager.connection.options.type !== \"mongodb\" &&\n                transactionEntityManager.queryRunner &&\n                transactionEntityManager.queryRunner.isTransactionActive &&\n                transactionEntityManager.queryRunner.isReleased === false) {\n                return transactionEntityManager.queryRunner\n                    .commitTransaction()\n                    .then(() => transactionEntityManager.queryRunner.release())\n                    .then(() => gqlResponse);\n            }\n            return gqlResponse;\n\n        }).then((gqlResponse) => {\n\n            res.setHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n            res.setHeader(\"Content-Length\", String(Buffer.byteLength(gqlResponse, \"utf8\")));\n            res.write(gqlResponse);\n            res.end();\n\n            // request has finished - reset container\n            Container.reset(req);\n\n        }).catch((error: HttpQueryError) => {\n\n            // rollback transaction\n            const transactionEntityManager = container.has(EntityManager) ? container.get(EntityManager) : undefined;\n            if (transactionEntityManager &&\n                transactionEntityManager.connection.options.type !== \"mongodb\" &&\n                transactionEntityManager.queryRunner &&\n                transactionEntityManager.queryRunner.isTransactionActive &&\n                transactionEntityManager.queryRunner.isReleased === false) {\n                return transactionEntityManager.queryRunner\n                    .rollbackTransaction()\n                    .then(() => transactionEntityManager.queryRunner.release())\n                    .then(() => { throw error; });\n            }\n            throw error;\n\n        }).catch((error: HttpQueryError) => {\n\n            if (\"HttpQueryError\" !== error.name)\n                return next(error);\n\n            if (error.headers) {\n                Object.keys(error.headers).forEach(header => {\n                    res.setHeader(header, error.headers[header]);\n                });\n            }\n\n            res.statusCode = error.statusCode;\n            res.write(error.message);\n            res.end();\n\n            // request has finished - reset container\n            Container.reset(req);\n        });\n    };\n}"],"sourceRoot":"."}