{"version":3,"sources":["../../src/commands/GenerateModelsCommand.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAAmC;AACnC,uDAAmE;AACnE,uEAAoE;AACpE,uBAAyB;AAEzB,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC;AAE/B;;GAEG;AACH;IAAA;QAEI,YAAO,GAAG,iBAAiB,CAAC;QAC5B,aAAQ,GAAG,iDAAiD,CAAC;IA8DjE,CAAC;IA5DG,uCAAO,GAAP,UAAQ,KAAU;QACd,OAAO,KAAK;aACP,MAAM,CAAC,SAAS,EAAE;YACf,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,+BAA+B;YACzC,QAAQ,EAAE,IAAI;SACjB,CAAC;aACD,MAAM,CAAC,MAAM,EAAE;YACZ,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,+CAA+C;YACzD,QAAQ,EAAE,IAAI;SACjB,CAAC;aACD,MAAM,CAAC,KAAK,EAAE;YACX,KAAK,EAAE,GAAG;YACV,QAAQ,EAAE,4JAA4J;YACtK,QAAQ,EAAE,IAAI;SACjB,CAAC,CAAC;IACX,CAAC;IAEK,uCAAO,GAAb,UAAc,IAAS;;;;gBACnB,iBAAS,CAAC;oBACN,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,OAAO,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;iBAChD,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS;oBACb,OAAO,CAAC,GAAG,CAAC,sDAAsD,CAAC,CAAC;oBAEpE,OAAO,wBAAkB,CAAC;wBACtB,QAAQ,EAAE,YAAY;wBACtB,GAAG,EAAE,mBAAmB,GAAG,IAAI,CAAC,IAAI,GAAG,UAAU;wBACjD,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG;wBACnC,MAAM,EAAE,IAAI;qBACf,CAAC;yBACG,IAAI,CAAC,UAAC,gBAAuB;wBAC1B,0FAA0F;wBAE1F,OAAO,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,UAAO,MAAW;;;;;wCAMhD,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;wCAEtC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;4CACtB,OAAO,CAAC,GAAG,CAAC,qCAAmC,MAAM,CAAC,QAAU,CAAC,CAAC;4CAE3C,sBAAO;yCACjC;wCAED,KAAA,CAAA,KAAA,EAAE,CAAA,CAAC,aAAa,CAAA;8CAAC,MAAM,CAAC,QAAQ;wCAAE,qBAAM,mBAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,EAAA;;wCAAjF,wBAAkC,SAA+C,GAAC,CAAC;wCACnF,OAAO,CAAC,GAAG,CAAC,+BAA6B,MAAM,CAAC,QAAU,CAAC,CAAC;;;;6BAC/D,CAAC,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,SAAS,CAAC,IAAI,EAAE,EAAhB,CAAgB,CAAC,CAAC;oBAErC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,KAAK;wBACV,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;wBACrB,OAAO,SAAS,CAAC,IAAI,EAAE,CAAC;oBAC5B,CAAC,CAAC,CAAC;gBACX,CAAC,CAAC,CAAC;;;;KACN;IAEL,4BAAC;AAAD,CAjEA,AAiEC,IAAA;AAjEY,sDAAqB","file":"GenerateModelsCommand.js","sourcesContent":["import {bootstrap} from \"../index\";\nimport {executeWithOptions} from \"graphql-code-generator/dist/cli\";\nimport {prettify} from \"graphql-code-generator/dist/utils/prettier\";\nimport * as fs from \"fs\";\n\nconst chalk = require(\"chalk\");\n\n/**\n * Generates models for the given graphql schemas.\n */\nexport class GenerateModelsCommand {\n\n    command = \"generate:models\";\n    describe = \"Generates models for the given graphql schemas.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"schemas\", {\n                alias: \"s\",\n                describe: \"GraphQL schemas to be loaded.\",\n                required: true\n            })\n            .option(\"port\", {\n                alias: \"p\",\n                describe: \"Port which should be used for express server.\",\n                required: true\n            })\n            .option(\"out\", {\n                alias: \"o\",\n                describe: \"Path for generation output file/directory. When using single-file generator specify filename, and when using multiple-files generator specify a directory.\",\n                required: true\n            });\n    }\n\n    async handler(argv: any) {\n        bootstrap({\n            port: argv.port,\n            schemas: [process.cwd() + \"/\" + argv.schemas]\n        }).then(framework => {\n            console.log(\"Schemas are loaded and application was bootstrapped.\");\n\n            return executeWithOptions({\n                template: \"typescript\",\n                url: \"http://127.0.0.1:\" + argv.port + \"/graphql\",\n                out: process.cwd() + \"/\" + argv.out,\n                schema: true\n            })\n                .then((generationResult: any[]) => {\n                    // console.log(`Generation result contains total of ${generationResult.length} files...`);\n\n                    return Promise.all(generationResult.map(async (result: any) => {\n                        // if (!options.overwrite && fileExists(result.filename)) {\n                        //     console.log(`Generated file skipped (already exists, and no-overwrite flag is ON): ${result.filename}`);\n                        //     return;\n                        // }\n\n                        const content = result.content.trim();\n\n                        if (content.length === 0) {\n                            console.log(`Generated file skipped (empty): ${result.filename}`);\n\n                                                   return;\n                        }\n\n                        fs.writeFileSync(result.filename, await prettify(result.filename, result.content));\n                        console.log(`Generated file written to ${result.filename}`);\n                    })).then(() => framework.stop());\n\n                }).catch(error => {\n                    console.error(error);\n                    return framework.stop();\n                });\n        });\n    }\n\n}\n"],"sourceRoot":".."}