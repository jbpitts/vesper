{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":"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","file":"InitCommand.js","sourcesContent":["import * as path from \"path\";\nimport {CommandUtils} from \"./CommandUtils\";\n\nconst chalk = require(\"chalk\");\n\n/**\n * Generates a new project with Vesper.\n */\nexport class InitCommand {\n\n    command = \"init\";\n    describe = \"Generates initial Vesper project structure. \" +\n        \"If name specified then creates files inside directory called as name. \" +\n        \"If its not specified then creates files inside current directory.\";\n\n    builder(yargs: any) {\n        return yargs\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the project directory.\"\n            })\n            .option(\"javascript\", {\n                describe: \"Creates a JavaScript project.\"\n            })\n            .option(\"typescript\", {\n                describe: \"Creates a TypeScript project.\"\n            })\n            .option(\"db\", {\n                alias: \"database\",\n                describe: \"Database type you'll use in your project.\"\n            });\n    }\n\n    async handler(argv: any) {\n        try {\n            const language = argv.typescript !== undefined ? \"typescript\" : \"javascript\";\n            const database = argv.database || \"sqlite\";\n            const basePath = process.cwd() + (argv.name ? (\"/\" + argv.name) : \"\");\n            const projectName = argv.name ? path.basename(argv.name) : undefined;\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.getPackageJsonTemplate(projectName), false);\n            if (database !== \"sqlite\")\n                await CommandUtils.createFile(basePath + \"/docker-compose.yml\", InitCommand.getDockerComposeTemplate(database), false);\n            await CommandUtils.createFile(basePath + \"/.gitignore\", InitCommand.getGitIgnoreFile());\n            await CommandUtils.createFile(basePath + \"/README.md\", InitCommand.getReadmeTemplate(database), false);\n            if (language === \"typescript\")\n                await CommandUtils.createFile(basePath + \"/tsconfig.json\", InitCommand.getTsConfigTemplate());\n            await CommandUtils.createFile(basePath + \"/ormconfig.json\", InitCommand.getOrmConfigTemplate(database));\n\n            if (language === \"typescript\") {\n                await CommandUtils.createFile(basePath + \"/src/controller/UserController.ts\", InitCommand.getUserControllerTsTemplate());\n                await CommandUtils.createFile(basePath + \"/src/controller/PhotoController.ts\", InitCommand.getPhotoControllerTsTemplate());\n                await CommandUtils.createFile(basePath + \"/src/args/UsersArgs.ts\", InitCommand.getUsersArgsTemplate());\n                await CommandUtils.createFile(basePath + \"/src/args/UserSaveArgs.ts\", InitCommand.getUserSaveArgsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/args/PhotoSaveArgs.ts\", InitCommand.getPhotoSaveArgsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/entity/User.ts\", InitCommand.getUserEntityTsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/entity/Photo.ts\", InitCommand.getPhotoEntityTsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/index.ts\", InitCommand.getAppIndexTsTemplate());\n\n            } else {\n                await CommandUtils.createFile(basePath + \"/src/controller/UserController.js\", InitCommand.getUserControllerJsTemplate());\n                await CommandUtils.createFile(basePath + \"/src/controller/PhotoController.js\", InitCommand.getPhotoControllerJsTemplate());\n                await CommandUtils.createFile(basePath + \"/src/entity/User.js\", InitCommand.getUserEntityJsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/entity/Photo.js\", InitCommand.getPhotoEntityJsTemplate(database));\n                await CommandUtils.createFile(basePath + \"/src/index.js\", InitCommand.getAppIndexJsTemplate());\n\n            }\n\n            await CommandUtils.createFile(basePath + \"/src/schema/model/User.graphql\", InitCommand.getUserModelSchemaTemplate(database));\n            await CommandUtils.createFile(basePath + \"/src/schema/model/Photo.graphql\", InitCommand.getPhotoModelSchemaTemplate(database));\n            await CommandUtils.createFile(basePath + \"/src/schema/controller/UserController.graphql\", InitCommand.getUserControllerSchemaTemplate(database));\n            await CommandUtils.createFile(basePath + \"/src/schema/controller/PhotoController.graphql\", InitCommand.getPhotoControllerSchemaTemplate(database));\n            await CommandUtils.createDirectories(basePath + \"/src/migration\");\n\n            // generate extra files for express application\n\n            const packageJsonContents = await CommandUtils.readFile(basePath + \"/package.json\");\n            await CommandUtils.createFile(basePath + \"/package.json\", InitCommand.appendPackageJson(packageJsonContents, database, language));\n\n            if (argv.name) {\n                console.log(chalk.green(`Project created inside ${chalk.blue(basePath)} directory.`));\n\n            } else {\n                console.log(chalk.green(`Project created inside current directory.`));\n            }\n\n        } catch (err) {\n            console.log(chalk.black.bgRed(\"Error during project initialization:\"));\n            console.error(err);\n            process.exit(1);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getOrmConfigTemplate(database: string): string {\n        const options: any = { };\n        switch (database) {\n            case \"mysql\":\n                Object.assign(options, {\n                    type: \"mysql\",\n                    host: \"localhost\",\n                    port: 3306,\n                    username: \"test\",\n                    password: \"test\",\n                    database: \"test\",\n                });\n                break;\n            case \"mariadb\":\n                Object.assign(options, {\n                    type: \"mariadb\",\n                    host: \"localhost\",\n                    port: 3306,\n                    username: \"test\",\n                    password: \"test\",\n                    database: \"test\",\n                });\n                break;\n            case \"sqlite\":\n                Object.assign(options, {\n                    type: \"sqlite\",\n                    \"database\": \"database.sqlite\",\n                });\n                break;\n            case \"postgres\":\n                Object.assign(options, {\n                    \"type\": \"postgres\",\n                    \"host\": \"localhost\",\n                    \"port\": 5432,\n                    \"username\": \"test\",\n                    \"password\": \"test\",\n                    \"database\": \"test\",\n                });\n                break;\n            case \"mssql\":\n                Object.assign(options, {\n                    \"type\": \"mssql\",\n                    \"host\": \"localhost\",\n                    \"username\": \"sa\",\n                    \"password\": \"Admin12345\",\n                    \"database\": \"tempdb\",\n                });\n                break;\n            case \"oracle\":\n                Object.assign(options, {\n                    \"type\": \"oracle\",\n                    \"host\": \"localhost\",\n                    \"username\": \"system\",\n                    \"password\": \"oracle\",\n                    \"port\": 1521,\n                    \"sid\": \"xe.oracle.docker\",\n                });\n                break;\n            case \"mongodb\":\n                Object.assign(options, {\n                    \"type\": \"mongodb\",\n                    \"database\": \"test\",\n                });\n                break;\n        }\n        Object.assign(options, {\n            synchronize: true,\n            logging: false,\n            entities: [\n                \"src/entity/**/*.ts\"\n            ],\n            migrations: [\n                \"src/migration/**/*.ts\"\n            ],\n            subscribers: [\n                \"src/subscriber/**/*.ts\"\n            ],\n            cli: {\n                entitiesDir: \"src/entity\",\n                migrationsDir: \"src/migration\",\n                subscribersDir: \"src/subscriber\"\n            }\n        });\n        return JSON.stringify(options, undefined, 3);\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getTsConfigTemplate(): string {\n        return JSON.stringify({\n            compilerOptions: {\n                outDir: \"./dist\",\n                lib: [\"es5\", \"es6\", \"es7\", \"esnext\"],\n                target: \"es5\",\n                module: \"commonjs\",\n                moduleResolution: \"node\",\n                emitDecoratorMetadata: true,\n                experimentalDecorators: true,\n                sourceMap: true\n            }\n        }\n        , undefined, 3);\n    }\n\n    /**\n     * Gets contents of the .gitignore file.\n     */\n    protected static getGitIgnoreFile(): string {\n        return `.idea/\n.vscode/\ndist/\nnode_modules/\ntmp/\ntemp/`;\n    }\n\n    /**\n     * Gets contents of the user entity.\n     */\n    protected static getUserEntityTsTemplate(database: string): string {\n        return `import {Entity, ${ database === \"mongodb\" ? \"ObjectIdColumn, ObjectID\" : \"PrimaryGeneratedColumn, OneToMany\" }, Column} from \"typeorm\";\nimport {Photo} from \"./Photo\";\n\n@Entity()\nexport class User {\n\n    ${ database === \"mongodb\" ? \"@ObjectIdColumn()\" : \"@PrimaryGeneratedColumn()\" }\n    id: ${ database === \"mongodb\" ? \"ObjectID\" : \"number\" };\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n${ database !== \"mongodb\" ? `\n    @OneToMany(() => Photo, photo => photo.user)\n    photos: Photo[];` : \"\"}\n\n}\n`;\n    }\n\n    /**\n     * Gets contents of the user entity.\n     */\n    protected static getUserEntityJsTemplate(database: string): string {\n        return `import {EntitySchema} from \"typeorm\";\n\nexport const User = new EntitySchema({\n    name: \"User\",\n    columns: {\n        id: {\n            ${ database === \"mongodb\" ? \"objectId: true,\" : \"type: Number,\" }\n            primary: true,\n            generated: true\n        },\n        firstName: {\n            type: String\n        },\n        lastName: {\n            type: String\n        }\n    },\n    relations: {\n        photos: {\n            type: \"one-to-many\",\n            target: \"Photo\",\n            inverseSide: \"user\"\n        }\n    }\n});\n`;\n    }\n\n    /**\n     * Gets contents of the photo entity.\n     */\n    protected static getPhotoEntityTsTemplate(database: string): string {\n        return `import {Entity, ${ database === \"mongodb\" ? \"ObjectIdColumn, ObjectID\" : \"PrimaryGeneratedColumn, ManyToOne\" }, Column} from \"typeorm\";\nimport {User} from \"./User\";\n\n@Entity()\nexport class Photo {\n\n    ${ database === \"mongodb\" ? \"@ObjectIdColumn()\" : \"@PrimaryGeneratedColumn()\" }\n    id: ${ database === \"mongodb\" ? \"ObjectID\" : \"number\" };\n\n    @Column()\n    filename: string;\n\n    @Column()\n    userId: ${ database === \"mongodb\" ? \"string\" : \"number\" };\n${ database !== \"mongodb\" ? `\n    @ManyToOne(() => User, user => user.photos)\n    user: User;` : \"\"}\n\n}\n`;\n    }\n\n    /**\n     * Gets contents of the photo entity.\n     */\n    protected static getPhotoEntityJsTemplate(database: string): string {\n        return `import {EntitySchema} from \"typeorm\";\n\nexport const Photo = new EntitySchema({\n    name: \"Photo\",\n    columns: {\n        id: {\n            ${ database === \"mongodb\" ? \"objectId: true,\" : \"type: Number,\" }\n            primary: true,\n            generated: true\n        },\n        filename: {\n            type: String\n        },\n        userId: {\n            type: ${ database === \"mongodb\" ? \"String\" : \"Number\" }\n        },\n    },\n    relations: {\n        user: {\n            type: \"many-to-one\",\n            target: \"User\",\n            inverseSide: \"photos\"\n        }\n    }\n});\n`;\n    }\n\n    /**\n     * Gets contents of the user controller file.\n     */\n    protected static getUserControllerTsTemplate(): string {\n        return `import {Controller, Mutation, Query} from \"vesper\";\nimport {EntityManager, FindManyOptions} from \"typeorm\";\nimport {UsersArgs} from \"../args/UsersArgs\";\nimport {UserSaveArgs} from \"../args/UserSaveArgs\";\nimport {User} from \"../entity/User\";\n\n@Controller()\nexport class UserController {\n\n    constructor(private entityManager: EntityManager) {\n    }\n\n    @Query()\n    users(args: UsersArgs): Promise<User[]> {\n\n        const findOptions: FindManyOptions = {};\n        if (args.limit)\n            findOptions.skip = args.limit;\n        if (args.offset)\n            findOptions.take = args.offset;\n\n        return this.entityManager.find(User, findOptions);\n    }\n\n    @Query()\n    user({ id }: { id: number }): Promise<User> {\n        return this.entityManager.findOne(User, id);\n    }\n\n    @Mutation()\n    async userSave(args: UserSaveArgs): Promise<User> {\n        const user = args.id ? await this.entityManager.findOne(User, args.id) : new User();\n        user.firstName = args.firstName;\n        user.lastName = args.lastName;\n        return this.entityManager.save(user);\n    }\n\n    @Mutation()\n    async userDelete({ id }: { id: number }): Promise<boolean> {\n        const user = await this.entityManager.findOne(User, id);\n        await this.entityManager.remove(user);\n        return true;\n    }\n\n}`;\n    }\n\n    /**\n     * Gets contents of the user controller file.\n     */\n    protected static getUserControllerJsTemplate(): string {\n        return `import {EntityManager} from \"typeorm\";\nimport {User} from \"../entity/User\";\n\nexport class UserController {\n\n    constructor(container) {\n        this.entityManager = container.get(EntityManager);\n    }\n\n    users(args) {\n\n        const findOptions = {};\n        if (args.limit)\n            findOptions.skip = args.limit;\n        if (args.offset)\n            findOptions.take = args.offset;\n\n        return this.entityManager.find(User, findOptions);\n    }\n\n    user({ id }) {\n        return this.entityManager.findOne(User, id);\n    }\n\n    async userSave(args) {\n        const user = args.id ? await this.entityManager.findOne(User, args.id) : {};\n        user.firstName = args.firstName;\n        user.lastName = args.lastName;\n        return this.entityManager.save(User, user);\n    }\n\n    async userDelete({ id }) {\n        await this.entityManager.remove(User, { id });\n        return true;\n    }\n\n}`;\n    }\n\n    /**\n     * Gets contents of the photo controller file.\n     */\n    protected static getPhotoControllerTsTemplate(): string {\n        return `import {Controller, Mutation, Query} from \"vesper\";\nimport {EntityManager} from \"typeorm\";\nimport {PhotoSaveArgs} from \"../args/PhotoSaveArgs\";\nimport {Photo} from \"../entity/Photo\";\n\n@Controller()\nexport class PhotoController {\n\n    constructor(private entityManager: EntityManager) {\n    }\n\n    @Query()\n    photos(): Promise<Photo[]> {\n        return this.entityManager.find(Photo);\n    }\n\n    @Query()\n    photo({ id }: { id: number }): Promise<Photo> {\n        return this.entityManager.findOne(Photo, id);\n    }\n\n    @Mutation()\n    async photoSave(args: PhotoSaveArgs): Promise<Photo> {\n        const photo = args.id ? await this.entityManager.findOne(Photo, args.id) : new Photo();\n        photo.filename = args.filename;\n        photo.userId = args.userId;\n        return this.entityManager.save(photo);\n    }\n\n    @Mutation()\n    async photoDelete({ id }: { id: number }): Promise<boolean> {\n        const photo = await this.entityManager.findOne(Photo, id);\n        await this.entityManager.remove(photo);\n        return true;\n    }\n\n}`;\n    }\n\n    /**\n     * Gets contents of the photo controller file.\n     */\n    protected static getPhotoControllerJsTemplate(): string {\n        return `import {EntityManager} from \"typeorm\";\nimport {Photo} from \"../entity/Photo\";\n\nexport class PhotoController {\n\n    constructor(container) {\n        this.entityManager = container.get(EntityManager);\n    }\n\n    photos() {\n        return this.entityManager.find(Photo);\n    }\n\n    photo({ id }) {\n        return this.entityManager.findOne(Photo, id);\n    }\n\n    async photoSave(args) {\n        const photo = args.id ? await this.entityManager.findOne(Photo, args.id) : {};\n        photo.filename = args.filename;\n        photo.userId = args.userId;\n        return this.entityManager.save(Photo, photo);\n    }\n\n    async photoDelete({ id }) {\n        await this.entityManager.remove(Photo, { id });\n        return true;\n    }\n\n}`;\n    }\n\n    /**\n     * Gets contents of the User graphql schema file.\n     */\n    protected static getUserModelSchemaTemplate(database: string): string {\n        return `type User {\n    id: ${database === \"mongodb\" ? \"String\" : \"Int\"}\n    firstName: String\n    lastName: String\n    photos: [Photo]\n}`;\n    }\n\n    /**\n     * Gets contents of the Photo graphql schema file.\n     */\n    protected static getPhotoModelSchemaTemplate(database: string): string {\n        return `type Photo {\n    id: ${database === \"mongodb\" ? \"String\" : \"Int\"}\n    filename: String\n    userId: ${database === \"mongodb\" ? \"String\" : \"Int\"}\n    user: User\n}`;\n    }\n\n    /**\n     * Gets contents of the User controller file.\n     */\n    protected static getUserControllerSchemaTemplate(database: string): string {\n        return `type Query {\n    users(limit: Int, offset: Int): [User]\n    user(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}): User\n}\n\ntype Mutation {\n    userSave(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}, firstName: String, lastName: String): User\n    userDelete(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}): Boolean\n}`;\n    }\n\n    /**\n     * Gets contents of the Photo controller file.\n     */\n    protected static getPhotoControllerSchemaTemplate(database: string): string {\n        return `type Query {\n    photos: [Photo]\n    photo(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}): Photo\n}\n\ntype Mutation {\n    photoSave(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}, filename: String, userId: ${database === \"mongodb\" ? \"String\" : \"Int\"}): Photo\n    photoDelete(id: ${database === \"mongodb\" ? \"String\" : \"Int\"}): Boolean\n}`;\n    }\n\n    /**\n     * Gets contents of the UsersArgs file.\n     */\n    protected static getUsersArgsTemplate(): string {\n        return `export interface UsersArgs {\n\n    limit?: number;\n    offset?: number;\n\n}`;\n    }\n\n    /**\n     * Gets contents of the UserSaveArgs file.\n     */\n    protected static getUserSaveArgsTemplate(database: string): string {\n        return `export interface UserSaveArgs {\n\n    id?: ${database === \"mongodb\" ? \"string\" : \"number\"};\n    firstName: string;\n    lastName: string;\n\n}`;\n    }\n\n    /**\n     * Gets contents of the PhotoSaveArgs file.\n     */\n    protected static getPhotoSaveArgsTemplate(database: string): string {\n        return `export interface PhotoSaveArgs {\n\n    id?: ${database === \"mongodb\" ? \"string\" : \"number\"};\n    filename: string;\n    userId: ${database === \"mongodb\" ? \"string\" : \"number\"};\n\n}`;\n    }\n\n    /**\n     * Gets contents of the main (index) application file.\n     */\n    protected static getAppIndexTsTemplate(): string {\n        return `import {bootstrap} from \"vesper\";\n\nbootstrap({\n    port: 3000,\n    cors: true,\n    controllers: [__dirname + \"/controller/**/*.ts\"],\n    resolvers: [__dirname + \"/resolver/**/*.ts\"],\n    schemas: [__dirname + \"/schema/**/*.graphql\"]\n}).then(() => {\n    console.log(\"Your app is up and running on http://localhost:3000. \" +\n        \"You can use playground in development mode on http://localhost:3000/playground\");\n}).catch(error => {\n    console.error(error.stack ? error.stack : error);\n});\n`;\n    }\n\n    /**\n     * Gets contents of the main (index) application file.\n     */\n    protected static getAppIndexJsTemplate(): string {\n        return `import \"babel-polyfill\";\nimport {bootstrap} from \"vesper\";\nimport {UserController} from \"./controller/UserController\";\nimport {PhotoController} from \"./controller/PhotoController\";\nimport {Photo} from \"./entity/Photo\";\nimport {User} from \"./entity/User\";\n\nbootstrap({\n    port: 3000,\n    cors: true,\n    controllers: [\n        { controller: UserController, action: \"users\", type: \"query\" },\n        { controller: UserController, action: \"user\", type: \"query\" },\n        { controller: UserController, action: \"userSave\", type: \"mutation\" },\n        { controller: UserController, action: \"userDelete\", type: \"mutation\" },\n        \n        { controller: PhotoController, action: \"photos\", type: \"query\" },\n        { controller: PhotoController, action: \"photo\", type: \"query\" },\n        { controller: PhotoController, action: \"photoSave\", type: \"mutation\" },\n        { controller: PhotoController, action: \"photoDelete\", type: \"mutation\" },\n    ],\n    resolvers: [\n    ],\n    entities: [\n        Photo,\n        User\n    ],\n    schemas: [__dirname + \"/schema/**/*.graphql\"]\n}).then(() => {\n    console.log(\"Your app is up and running on http://localhost:3000. \" +\n        \"You can use playground in development mode on http://localhost:3000/playground\");\n}).catch(error => {\n    console.error(error.stack ? error.stack : error);\n});\n`;\n    }\n\n    /**\n     * Gets contents of the new package.json file.\n     */\n    protected static getPackageJsonTemplate(projectName?: string): string {\n        return JSON.stringify({\n            name: projectName || \"vesper-project\",\n            version: \"0.0.1\",\n            description: \"Awesome project developed with Vesper framework.\",\n            devDependencies: {\n            },\n            dependencies: {\n            },\n            scripts: {\n            }\n        }, undefined, 3);\n    }\n\n    /**\n     * Gets contents of the new docker-compose.yml file.\n     */\n    protected static getDockerComposeTemplate(database: string): string {\n\n        switch (database) {\n            case \"mysql\":\n                return `version: '3'\nservices:\n\n  mysql:\n    image: \"mysql:5.7.10\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`;\n            case \"mariadb\":\n                return `version: '3'\nservices:\n\n  mariadb:\n    image: \"mariadb:10.1.16\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`;\n            case \"postgres\":\n                return `version: '3'\nservices:\n\n  postgres:\n    image: \"postgres:9.6.1\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: \"test\"\n      POSTGRES_PASSWORD: \"test\"\n      POSTGRES_DB: \"test\"\n\n`;\n            case \"sqlite\":\n                return `version: '3'\nservices:\n`;\n            case \"oracle\":\n                throw new Error(`You cannot initialize a project with docker for Oracle driver yet.`); // todo: implement for oracle as well\n\n            case \"mssql\":\n                return `version: '3'\nservices:\n\n  mssql:\n    image: \"microsoft/mssql-server-linux:rc2\"\n    ports:\n      - \"1433:1433\"\n    environment:\n      SA_PASSWORD: \"Admin12345\"\n      ACCEPT_EULA: \"Y\"\n\n`;\n            case \"mongodb\":\n                return `version: '3'\nservices:\n\n  mongodb:\n    image: \"mongo:3.4.1\"\n    container_name: \"typeorm-mongodb\"\n    ports:\n      - \"27017:27017\"\n\n`;\n        }\n        return \"\";\n    }\n\n    /**\n     * Gets contents of the new readme.md file.\n     */\n    protected static getReadmeTemplate(database: string): string {\n        let template = `# Awesome Vesper Project\n        \nSteps to run this project:\n\n1. Run \\`npm i\\` command\n`;\n\n        if (database !== \"sqlite\") {\n            template += `2. Run \\`docker-compose up\\` command\n`;\n        } else {\n            template += `2. Setup database settings inside \\`ormconfig.json\\` file\n`;\n        }\n\n        template += `3. Run \\`npm start\\` command\n        \nTo start testing things you can execute following queries:\n        \n\\`\\`\\`graphql\n# 1. First few users\nmutation UserSaveBulkMutation {\n  johny: userSave(firstName: \"Johny\", lastName: \"Cage\") {\n    id\n  }\n  linda: userSave(firstName: \"Linda\", lastName: \"Cage\") {\n    id\n  }\n}\n\n# 2. List users\nquery UserListQuery {\n  users {\n    id\n    firstName\n    lastName\n  }\n}\n\n# 3. Get user by id\nquery UserByIdQuery {\n  user(id: 1) { # insert user id here\n    id\n    firstName\n    lastName\n  }\n}\n${database !== \"mongodb\" ? `\n# 4. Save some photos\nmutation PhotoSaveBulkMutation {\n  johnyFirstPhoto: photoSave(filename: \"johny1.jpg\", userId: 1) {\n    id\n  }\n  johnySecondPhoto: photoSave(filename: \"johny2.jpg\", userId: 1) {\n    id\n  }\n  lindaFirstPhoto: photoSave(filename: \"linda1.jpg\", userId: 2) {\n    id\n  }\n  lindaSecondPhoto: photoSave(filename: \"linda2.jpg\", userId: 2) {\n    id\n  }\n}\n\n# 5. Get all photos and their authors\nquery PhotoListWithUserQuery {\n  photos {\n    id\n    filename\n    user {\n      id\n      firstName\n      lastName\n    }\n  }\n}\n\n# 6. Get all users and their photos\nquery UserListWithPhotosQuery {\n  users {\n    id\n    firstName\n    lastName\n    photos {\n      id\n      filename\n    }\n  }\n}` : \"\"} \n\\`\\`\\`\n`;\n        return template;\n    }\n\n    /**\n     * Appends to a given package.json template everything needed.\n     */\n    protected static appendPackageJson(packageJsonContents: string, database: string, language: \"typescript\"|\"javascript\"): string {\n        const packageJson = JSON.parse(packageJsonContents);\n\n        if (!packageJson.devDependencies) packageJson.devDependencies = {};\n\n        if (language === \"typescript\") {\n            Object.assign(packageJson.devDependencies, {\n                \"ts-node\": \"^5.0.1\",\n                // \"@types/node\": \"^8.0.29\",\n                \"typescript\": \"^2.7.2\"\n            });\n        } else {\n            Object.assign(packageJson.devDependencies, {\n                \"babel-cli\": \"^6.26.0\",\n                \"babel-polyfill\": \"^6.26.0\",\n                \"babel-preset-env\": \"^1.6.1\"\n            });\n        }\n\n        if (!packageJson.dependencies) packageJson.dependencies = {};\n        Object.assign(packageJson.dependencies, {\n            \"vesper\": require(\"../package.json\").version\n        });\n\n        switch (database) {\n            case \"mysql\":\n            case \"mariadb\":\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\";\n                break;\n            case \"postgres\":\n                packageJson.dependencies[\"pg\"] = \"^7.3.0\";\n                break;\n            case \"sqlite\":\n                packageJson.dependencies[\"sqlite3\"] = \"^3.1.10\";\n                break;\n            case \"oracle\":\n                packageJson.dependencies[\"oracledb\"] = \"^1.13.1\";\n                break;\n            case \"mssql\":\n                packageJson.dependencies[\"mssql\"] = \"^4.0.4\";\n                break;\n            case \"mongodb\":\n                packageJson.dependencies[\"mongodb\"] = \"^2.2.31\";\n                break;\n        }\n\n        if (!packageJson.scripts) packageJson.scripts = {};\n        if (language === \"typescript\") {\n            Object.assign(packageJson.scripts, {\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */\"ts-node src/index.ts\"\n            });\n        } else {\n            Object.assign(packageJson.scripts, {\n                \"compile\": \"npx babel src --out-dir dist --copy-files --source-maps --presets=babel-preset-env\",\n                \"start\": \"npm run compile && node ./dist/index.js\"\n            });\n        }\n        return JSON.stringify(packageJson, undefined, 3);\n    }\n\n}\n"],"sourceRoot":".."}