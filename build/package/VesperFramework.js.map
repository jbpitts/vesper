{"version":3,"sources":["../../src/VesperFramework.ts"],"names":[],"mappings":"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","file":"VesperFramework.js","sourcesContent":["import {VesperFrameworkOptions} from \"./options/VesperFrameworkOptions\";\nimport * as express from \"express\";\nimport {Application} from \"express\";\nimport {Server} from \"http\";\nimport {graphiqlExpress} from \"apollo-server-express\";\nimport * as bodyParser from \"body-parser\";\nimport * as cors from \"cors\";\nimport {buildVesperSchema, getMetadataArgsStorage, vesper} from \"./index\";\nimport {Container} from \"typedi\";\nimport * as fs from \"fs\";\nimport {SubscriptionServer} from \"subscriptions-transport-ws\";\nimport {execute, subscribe} from \"graphql\";\nimport expressPlayground from \"graphql-playground-middleware-express\";\n\nconst apolloUploadExpress = require(\"apollo-upload-server\").apolloUploadExpress;\n\n/**\n * Bootstraps Vesper framework.\n * Registers controllers and middlewares, creates http server and database connection.\n */\nexport class VesperFramework {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Application's root path.\n     */\n    root: string = require(\"app-root-path\").path;\n\n    /**\n     * Framework options.\n     */\n    options: VesperFrameworkOptions;\n\n    /**\n     * Express application instance.\n     */\n    application: Application;\n\n    /**\n     * Running http server instance.\n     */\n    server: Server;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: VesperFrameworkOptions) {\n        this.options = options;\n        this.application = options.expressApp || express();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Starts express application and http server.\n     * If port is not given then port from the framework options will be used.\n     */\n    async start(): Promise<void> {\n\n        // throw error if port was not set\n        if (!this.options.port)\n            throw new Error(`Cannot start server because port is not set. Please set port in the framework options.`);\n\n        // set parameters to the container if defined\n        let parameters = this.buildParameters();\n        if (parameters) {\n            Object.keys(parameters).forEach(key => {\n                Container.set(key, parameters[key]);\n            });\n        }\n\n        // use all middlewares user specified in options\n        if (this.options.use)\n            this.options.use.forEach(use => this.application.use(use));\n\n        // register CORS if it was enabled\n        if (this.options.cors)\n            this.application.use(this.options.cors === true ? cors() : cors(this.options.cors));\n\n        // register vesper middleware with grahpql middleware inside\n        const graphQLRoute = this.options.graphQLRoute || \"/graphql\";\n        const schema = await buildVesperSchema(this.options);\n        this.application.use(graphQLRoute, bodyParser.json(), apolloUploadExpress(), vesper(schema));\n\n        // start server on a given port\n        return new Promise<void>((ok, fail) => {\n            this.server = this.application.listen(this.options.port, (err: any) => {\n                if (err)\n                    return fail(err);\n\n                // register the WebSocket for handling GraphQL subscriptions\n                const hasSubscriptions = getMetadataArgsStorage().actions.filter(action => action.type === \"subscription\");\n                if (hasSubscriptions) {\n                    new SubscriptionServer(\n                        { execute: execute as any, subscribe, schema },\n                        { server: this.server, path: \"/subscriptions\" }\n                    );\n                }\n\n                // register GraphIQL\n                if (this.options.graphIQLRoute === true || typeof this.options.graphIQLRoute === \"string\") {\n                    const graphIQLRoute = (this.options.graphIQLRoute && typeof this.options.graphIQLRoute === \"string\") ? this.options.graphIQLRoute : \"/graphiql\";\n                    const graphIOptions: any = { endpointURL: graphQLRoute };\n                    if (hasSubscriptions)\n                        graphIOptions.subscriptionsEndpoint = `ws://localhost:${this.options.port}/subscriptions`;\n                    this.application.use(graphIQLRoute, graphiqlExpress(graphIOptions));\n                }\n\n                // register playground\n                if (this.options.playground === true ||\n                    typeof this.options.graphIQLRoute === \"string\" ||\n                    (this.options.playground === undefined && process.env.NODE_ENV !== \"prod\")) {\n                    const playgroundRoute = (this.options.playground && typeof this.options.playground === \"string\") ? this.options.playground : \"/playground\";\n                    const graphIOptions: any = { endpoint: graphQLRoute };\n                    if (hasSubscriptions)\n                        graphIOptions.subscriptionsEndpoint = `ws://localhost:${this.options.port}/subscriptions`;\n                    this.application.use(playgroundRoute, expressPlayground(graphIOptions));\n                }\n\n                ok();\n            });\n        });\n    }\n\n    /**\n     * Stops express application and http server.\n     */\n    stop(): Promise<void> {\n        if (!this.server)\n            return Promise.resolve();\n\n        return new Promise<void>((ok, fail) => {\n            this.server.close((err: any) => err ? fail(err) : ok());\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds configuration parameters to be injected into the container.\n     */\n    protected buildParameters(): any|undefined {\n        let parameters: any;\n        if (typeof this.options.parameters === \"object\") {\n            parameters = this.options.parameters;\n\n        } else if (typeof this.options.parameters === \"string\") {\n            parameters = require(this.root + \"/\" + this.options.parameters);\n\n        } else if ((this.options.parameters as string[]) instanceof Array) {\n            (this.options.parameters  as string[]).reduce((parameters, fileName) => {\n                return Object.assign(parameters, require(this.root + \"/\" + fileName));\n            }, {});\n        } else {\n            if (fs.existsSync(this.root + \"/config.json\")) {\n                parameters = require(this.root + \"/config.json\");\n            }\n        }\n\n        return parameters;\n    }\n\n}\n"],"sourceRoot":"."}