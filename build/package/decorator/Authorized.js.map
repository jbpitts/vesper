{"version":3,"sources":["../../src/decorator/Authorized.ts"],"names":[],"mappings":";;AAAA,kCAAsE;AAEtE;;;;GAIG;AACH,oBAA2B,KAA8C;IACrE,OAAO,UAAU,MAAc,EAAE,UAAmB;QAChD,8BAAsB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC;YACrC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,UAAU,EAAE,UAAU;YACtB,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;SAC5B,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AARD,gCAQC","file":"Authorized.js","sourcesContent":["import {getMetadataArgsStorage, RoleCheckerInterface} from \"../index\";\n\n/**\n * Marks query / mutation to have a special access.\n * It usually means it requires user authorization or some specific user role.\n * Authorization logic must be defined in the framework settings.\n */\nexport function Authorized(roles?: { new (): RoleCheckerInterface }|any[]): Function {\n    return function (object: Object, methodName?: string) {\n        getMetadataArgsStorage().authorizes.push({\n            target: object.constructor,\n            methodName: methodName,\n            roles: roles ? roles : []\n        });\n    };\n}"],"sourceRoot":".."}