{"version":3,"sources":["../../src/decorator/Resolve.ts"],"names":[],"mappings":";;AAAA,kCAAgD;AAEhD;;GAEG;AACH,iBAAwB,OAA2B;IAC/C,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAClF,IAAM,MAAM,GAAG,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC;QACrD,8BAAsB,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;YACnC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,UAAU,EAAE,YAAY;YACxB,IAAI,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;YAC1D,UAAU,EAAE,MAAM;SACrB,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAXD,0BAWC","file":"Resolve.js","sourcesContent":["import {getMetadataArgsStorage} from \"../index\";\n\n/**\n * Used in resolvers to mark method as resolving some data.\n */\nexport function Resolve(options?: { name?: string }) {\n    return function (object: Object, propertyName: string) {\n        const paramTypes = Reflect.getMetadata(\"design:paramtypes\", object, propertyName);\n        const isMany = paramTypes && paramTypes[0] === Array;\n        getMetadataArgsStorage().resolves.push({\n            target: object.constructor,\n            methodName: propertyName,\n            name: (options && options.name) ? options.name : undefined,\n            dataLoader: isMany\n        });\n    };\n}"],"sourceRoot":".."}