{"version":3,"sources":["../../src/SchemaBuilder.ts"],"names":[],"mappings":"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","file":"SchemaBuilder.js","sourcesContent":["import \"reflect-metadata\";\nimport {Container} from \"typedi\";\nimport {getMetadataArgsStorage} from \"./index\";\nimport {\n    Connection,\n    ConnectionOptionsReader,\n    getConnectionManager,\n    getMetadataArgsStorage as getTypeORMMetadataArgsStorage\n} from \"typeorm\";\nimport {GraphQLScalarType, GraphQLSchema, Kind} from \"graphql\";\nimport {makeExecutableSchema} from \"graphql-tools\";\nimport {ActionMetadataBuilder} from \"./metadata/ActionMetadataBuilder\";\nimport {ActionMetadata} from \"./metadata/ActionMetadata\";\nimport {ResolveMetadataBuilder} from \"./metadata/ResolveMetadataBuilder\";\nimport {ResolveMetadata} from \"./metadata/ResolveMetadata\";\nimport {GraphModule} from \"./options/GraphModule\";\nimport {ActionExecutor} from \"./ActionExecutor\";\nimport {SchemaBuilderOptions} from \"./options/SchemaBuilderOptions\";\nimport {CurrentRequest} from \"./token/CurrentRequest\";\nimport {CurrentResponse} from \"./token/CurrentResponse\";\nimport {withFilter} from \"graphql-subscriptions\";\nimport DataLoader = require(\"dataloader\");\n\nconst GraphQLUpload = require(\"apollo-upload-server\").GraphQLUpload;\nconst {mergeTypes, fileLoader} = require(\"merge-graphql-schemas\");\nconst debug = require(\"debug\");\n\n/**\n * Builds graphql schema needed for graphql server.\n */\nexport class SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Framework options.\n     */\n    options: SchemaBuilderOptions;\n\n    /**\n     * Framework options.\n     */\n    connection?: Connection;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Graph modules.\n     */\n    protected modules: GraphModule[];\n\n    /**\n     * All built actions.\n     */\n    protected actionMetadatas: ActionMetadata[];\n\n    /**\n     * All resolve actions.\n     */\n    protected resolveMetadatas: ResolveMetadata[];\n\n    /**\n     * Used to execute controller actions.\n     */\n    protected actionExecutor: ActionExecutor;\n\n    /**\n     * Loggers used to log debug messages.\n     */\n    protected loggers = {\n        query: debug(\"graphql:controller:query\") as (str: string) => any,\n        mutation: debug(\"graphql:controller:mutation\") as (str: string) => any,\n        resolver: debug(\"graphql:resolver\") as (str: string) => any\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: SchemaBuilderOptions) {\n        this.options = options;\n        this.modules = this.buildModules();\n        this.actionMetadatas = new ActionMetadataBuilder(this.options, getMetadataArgsStorage()).build(this.modules);\n        this.resolveMetadatas = new ResolveMetadataBuilder(this.options, getMetadataArgsStorage()).build(this.modules);\n        this.actionExecutor = new ActionExecutor(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates ORM connection and builds grahpql schema.\n     */\n    async build(): Promise<GraphQLSchema> {\n\n        // create database connection\n        this.connection = await this.createORMConnection();\n\n        const schemaTypes = this.loadSchemaTypes();\n        const resolvers: any = {};\n        this.createDefaultResolvers(resolvers);\n        this.buildControllerResolvers(resolvers);\n        this.buildModelResolversFromEntityMetadata(resolvers);\n        this.buildCustomResolvers(resolvers);\n        if (this.options.customResolvers)\n            Object.assign(resolvers, this.options.customResolvers);\n\n        return makeExecutableSchema({\n            typeDefs: \"scalar Date \\r\\n scalar Upload \\r\\n\" + mergeTypes(schemaTypes) + \"\\r\\n\" + (this.options.customTypeDefs || \"\"),\n            resolvers: resolvers,\n            resolverValidationOptions: {\n                allowResolversNotInSchema: true\n            },\n            logger: {\n                log: (error: any) => {\n                    // todo: need to finish implementation\n                    // console.log((error as ValidationError).name);\n                    // console.log((error as ValidationError).toString());\n                    // console.log(error instanceof ValidationError);\n\n                    // skip user-made validation errors\n                    // if ((error as ValidationError).name === \"ValidationError\")\n                    //     return;\n\n                    if (this.options.logger)\n                        return this.options.logger(error);\n\n                    console.log((error as Error).stack ? (error as Error).stack : error);\n                }\n            }\n        });\n    }\n\n    async buildOnlySchema() {\n        const schemaTypes = this.loadSchemaTypes();\n        return makeExecutableSchema({\n            typeDefs: \"scalar Date \\r\\n scalar Upload \\r\\n\" + mergeTypes(schemaTypes) + \"\\r\\n\" + (this.options.customTypeDefs || \"\"),\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds all modules used in the app.\n     */\n    protected buildModules(): GraphModule[] {\n        const modules: GraphModule[] = [this.options];\n        if (this.options.modules) {\n            this.options.modules.forEach(module => {\n                if (module instanceof Function) {\n                    modules.push(Container.get(module));\n                } else {\n                    modules.push(module);\n                }\n            });\n        }\n        return modules;\n    }\n\n    /**\n     * Creates database connection if ormconfig was found.\n     */\n    protected async createORMConnection(): Promise<Connection|undefined> {\n        if (this.options.typeorm.connection) {\n            return this.options.typeorm.connection;\n        }\n        const readerOptions = this.options.typeorm && this.options.typeorm.connectionOptionsReaderOptions || {};\n        const name = this.options.typeorm && this.options.typeorm.connectionName || \"default\";\n        const hasConnection = await new ConnectionOptionsReader(readerOptions).has(name);\n        if (hasConnection) {\n            const options = await new ConnectionOptionsReader(readerOptions).get(name);\n            if (!options.entities)\n                Object.assign(options, { entities: [] });\n            if (!options.subscribers)\n                Object.assign(options, { subscribers: [] });\n            this.modules.forEach(module => {\n                if (module.entities)\n                    module.entities.forEach(entity => options.entities.push(entity));\n                if (module.entitySubscribers)\n                    module.entitySubscribers.forEach(entity => options.subscribers.push(entity));\n                if (module.entityRepositories) {\n                    module.entityRepositories.forEach(repository => {\n                        getTypeORMMetadataArgsStorage().entityRepositories.push({\n                            target: repository.repository,\n                            entity: repository.entity,\n                        });\n                    });\n                }\n                // todo: what about migrations ?\n            });\n            return getConnectionManager().create(options).connect();\n        }\n    }\n\n    /**\n     * Loads all schemas from all schema directories.\n     */\n    protected loadSchemaTypes(): string[] {\n\n        // collect all schemas from all modules\n        const schemas = this.modules.reduce((schemas, module) => {\n            if (module.schemas)\n                schemas.push(...module.schemas);\n            return schemas;\n        }, [] as string[]);\n\n        // if schemas are not defined in the configuration then throw an error\n        if (!schemas.length)\n            throw new Error(`You must provide \"schemas\" in the configuration options where from GraphQL schemas must be loaded and used.`);\n\n        // load all schemas\n        return schemas.reduce((types, schemaDir) => {\n            types.push(...fileLoader(schemaDir));\n            return types;\n        }, []);\n    }\n\n    /**\n     * Default resolvers provided by the framework.\n     */\n    protected createDefaultResolvers(resolvers: any): void {\n        Object.assign(resolvers, {\n            Date: new GraphQLScalarType({\n                name: \"Date\",\n                description: \"Date custom scalar type\",\n                parseValue(value) {\n                    return new Date(value); // value from the client\n                },\n                serialize(value) {\n                    return value.getTime(); // value sent to the client\n                },\n                parseLiteral(ast) {\n                    if (ast.kind === Kind.INT) {\n                        return parseInt(ast.value, 10); // ast value is always in string format\n                    }\n                    return null;\n                },\n            }),\n            Upload: GraphQLUpload\n        });\n    }\n\n    /**\n     * Builds resolvers from the graph controllers.\n     */\n    protected buildControllerResolvers(resolvers: any): void {\n        this.actionMetadatas.forEach(action => {\n\n            const resolverType = this.getResolverType(action.type);\n            if (!resolvers[resolverType]) resolvers[resolverType] = {};\n\n            if (resolverType === \"Subscription\") {\n                if (!this.options.subscriptionAsyncIterator)\n                    throw new Error(`\"subscriptionAsyncIterator\" must be defined in the framework options in order to use subscriptions.`);\n\n                const that = this;\n                resolvers[resolverType][action.name || action.methodName] = {\n                    subscribe: withFilter(() => this.options.subscriptionAsyncIterator(action.name || action.methodName), function (playload: any, args: any, context: any, info: any) {\n                        const container = Container.of(this);\n                        context.container = container;\n                        const executionResult = that.actionExecutor.executeControllerAction({\n                            metadata: action,\n                            request: undefined,\n                            response: undefined,\n                            container: container,\n                            obj: playload,\n                            args: args,\n                            context: context,\n                            info: info\n                        });\n                        if (executionResult instanceof Promise) {\n                            return executionResult.then(result => {\n                                if (result === undefined)\n                                    return true;\n                                return result;\n                            });\n                        } else {\n                            if (executionResult === undefined)\n                                return true;\n                            return executionResult;\n                        }\n                    })\n                };\n\n            } else {\n                resolvers[resolverType][action.name] = (parent: any, args: any, context: any, info: any) => {\n                    this.loggers[action.type as \"query\"|\"mutation\"](`controller action \"${action.name}\"`);\n                    return this.actionExecutor.executeControllerAction({\n                        metadata: action,\n                        request: context.container.get(CurrentRequest),\n                        response: context.container.get(CurrentResponse),\n                        container: context.container,\n                        obj: parent,\n                        args: args,\n                        context: context,\n                        info: info\n                    });\n                };\n            }\n        });\n    }\n\n    /**\n     * Builds model resolvers from entity metadatas.\n     * Used to automatically return entity relations.\n     */\n    protected buildModelResolversFromEntityMetadata(resolvers: any): void {\n        if (!this.connection)\n            return;\n\n        this.connection.entityMetadatas.forEach(entityMetadata => {\n            const resolverName = this.options.entityResolverNamingStrategy && entityMetadata.target instanceof Function\n                ? this.options.entityResolverNamingStrategy(entityMetadata.target)\n                : entityMetadata.targetName;\n            if (!resolverName)\n                return;\n\n            if (!resolvers[resolverName]) resolvers[resolverName] = {};\n            entityMetadata.relations.forEach(relation => {\n\n                // make sure not to override method if it was defined by user\n                resolvers[resolverName][relation.propertyName] = (parent: any, args: any, context: any, info: any) => {\n                    this.loggers.resolver(`entity relation \"${resolverName}.${relation.propertyName}\"`);\n\n                    // make sure not to override method if it was defined by user\n                    if (parent[relation.propertyName] !== undefined)\n                        return parent[relation.propertyName];\n\n                    if (!context.dataLoaders[resolverName])\n                        context.dataLoaders[resolverName] = {};\n\n                    // define data loader for this method if it was not defined yet\n                    if (!context.dataLoaders[resolverName][relation.propertyName]) {\n                        context.dataLoaders[resolverName][relation.propertyName] = new DataLoader((keys: { parent: any, args: any, context: any, info: any }[]) => {\n                            const entities = keys.map(key => key.parent);\n                            return this.connection\n                                .relationIdLoader\n                                .loadManyToManyRelationIdsAndGroup(relation, entities)\n                                .then(groups => groups.map(group => group.related));\n\n                        }, {\n                            cacheKeyFn: (key: { parent: any, args: any, context: any, info: any }) => {\n                                const {parent, args} = key;\n                                const entityIds = entityMetadata.getEntityIdMap(parent);\n                                return JSON.stringify({ entity: entityIds, args: args });\n                            }\n                        });\n                    }\n                    return context.dataLoaders[resolverName][relation.propertyName].load({ parent, args, context, info });\n                };\n            });\n        });\n    }\n\n    /**\n     * Builds resolvers from the resolve metadatas.\n     */\n    protected buildCustomResolvers(resolvers: any): void {\n\n        // register custom defined resolvers\n        this.resolveMetadatas.forEach(resolve => {\n\n            if (!resolvers[resolve.name])\n                resolvers[resolve.name] = {};\n\n            if (resolve.target.prototype[resolve.methodName] === undefined)\n                return;\n\n            resolvers[resolve.name][resolve.methodName] = (parent: any, args: any, context: any, info: any) => {\n                this.loggers.resolver(`model property \"${resolve.name}.${resolve.methodName}\"`);\n\n                if (resolve.dataLoader) {\n\n                    if (!context.dataLoaders[resolve.name] || !context.dataLoaders[resolve.name][resolve.methodName]) {\n                        if (!context.dataLoaders[resolve.name])\n                            context.dataLoaders[resolve.name] = {};\n\n                        context.dataLoaders[resolve.name][resolve.methodName] = new DataLoader((keys: { parent: any, args: any, context: any, info: any }[]) => {\n                            const entities = keys.map(key => key.parent);\n                            const result = this.actionExecutor.executeResolver({\n                                metadata: resolve,\n                                request: context.container.get(CurrentRequest),\n                                response: context.container.get(CurrentResponse),\n                                container: context.container,\n                                obj: entities,\n                                args: keys[0].args,\n                                context: keys[0].context,\n                                info: keys[0].info\n                            });\n                            if (!(result instanceof Promise))\n                                return Promise.resolve(result);\n\n                            return result;\n                        }, {\n                            cacheKeyFn: (key: { parent: any, args: any, context: any, info: any }) => {\n                                return JSON.stringify({parent: key.parent, args: key.args});\n                            }\n                        });\n                    }\n\n                    return context.dataLoaders[resolve.name][resolve.methodName].load({ parent, args, context, info });\n\n                } else {\n                    return this.actionExecutor.executeResolver({\n                        metadata: resolve,\n                        request: context.container.get(CurrentRequest),\n                        response: context.container.get(CurrentResponse),\n                        container: context.container,\n                        obj: parent,\n                        args: args,\n                        context: context,\n                        info: info\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * Gets resolver type from the given action type.\n     */\n    protected getResolverType(actionType: string): string {\n        if (actionType === \"query\") {\n            return \"Query\";\n\n        } else if (actionType === \"mutation\") {\n            return \"Mutation\";\n\n        } else if (actionType === \"subscription\") {\n            return \"Subscription\";\n        }\n    }\n\n}\n"],"sourceRoot":"."}