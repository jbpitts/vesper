{"version":3,"sources":["../../src/options/SchemaBuilderOptions.ts"],"names":[],"mappings":"","file":"SchemaBuilderOptions.js","sourcesContent":["import {GraphModule} from \"./GraphModule\";\nimport {Action} from \"../\";\nimport {ContainerInstance} from \"typedi\";\nimport {Connection} from \"typeorm\";\n\n/**\n * Vesper middleware options.\n */\nexport interface SchemaBuilderOptions extends GraphModule {\n\n    /**\n     * List of modules to load.\n     */\n    modules?: { new (): GraphModule }[];\n\n    /**\n     * Special function used to check user authorization roles per request.\n     * Should throw an error if authorization was failed.\n     * Can return asynchronous value.\n     */\n    authorizationChecker?: (roles: any[], action: Action) => Promise<any>|any;\n\n    /**\n     * Can be used to setup container on each user request.\n     * For example, you can setup a currently authorized user and store it in the container.\n     * Can return asynchronous value.\n     */\n    setupContainer?: (container: ContainerInstance, action: Action) => Promise<any>|any;\n\n    /**\n     * Setups AsyncIterator to use it for subscriptions.\n     */\n    subscriptionAsyncIterator?: (triggers: string | string[]) => AsyncIterator<any>;\n\n    /**\n     * Resolves name for an entity.\n     */\n    entityResolverNamingStrategy?: (entity: Function) => string;\n\n    /**\n     * Additional resolvers (applied to all other class-based resolvers).\n     */\n    customResolvers?: any;\n\n    /**\n     * Additional type definitions (applied to all other type definitions).\n     */\n    customTypeDefs?: any;\n\n    /**\n     * Custom TypeORM connection options.\n     */\n    typeorm?: {\n        /**\n         * Custom TypeORM ConnectionOptionsReader options.\n         */\n        connectionOptionsReaderOptions?: {\n            /**\n             * Directory where ormconfig should be read from.\n             * By default its your application root (where your app package.json is located).\n             */\n            root?: string,\n\n            /**\n             * Filename of the ormconfig configuration. By default its equal to \"ormconfig\".\n             */\n            configName?: string\n        };\n\n        /**\n         * Custom TypeORM connection name. \"default\" by default\n         */\n        connectionName?: string;\n\n        /**\n         * Supply a connection\n         */\n        connection?: Connection;\n    };\n\n    /**\n     * Logger to be used for error reporting.\n     * By default console.error is used.\n     */\n    logger?: (error: any) => any;\n\n    /**\n     * List of key-value parameters to set into the container.\n     * You can pass a parameter filenames (single or multiple files).\n     */\n    parameters?: object|string|string[];\n\n}"],"sourceRoot":".."}